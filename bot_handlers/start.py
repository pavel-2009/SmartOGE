from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import database.db as db
from keyboards.reply import start_keyboard
from .admin.start import IsNotAdmin

start_router = Router()


class Reg(StatesGroup):
    """States for user registration."""
    name = State()
    last_name = State()


@start_router.message(CommandStart(), IsNotAdmin())
async def cmd_start(message: Message, state: FSMContext) -> None:
    """Handle the /start command."""
    await message.answer(
        'üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø ‚Äî <b>–£–º–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä</b>, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –û–ì–≠. \n\n'
        'üìö –í–º–µ—Å—Ç–µ –º—ã —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö, –ø–æ—Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏—è—Ö –∏ —É–∑–Ω–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã,\n\n'
        '—á—Ç–æ–±—ã —Ç—ã <b>—É–≤–µ—Ä–µ–Ω–Ω–æ —Å–¥–∞–ª —ç–∫–∑–∞–º–µ–Ω</b>.',
        parse_mode='html'
    )

    
    if db.is_registered(message):
        await show_start_buttons(message)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
        await state.set_state(Reg.name)


@start_router.message(Reg.name)
async def process_name(message: Message, state: FSMContext) -> None:
    """Process the user's name."""
    text = message.text.strip()

    await state.update_data({'name': text})
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.')
    await state.set_state(Reg.last_name)


@start_router.message(Reg.last_name)
async def process_lastname(message: Message, state: FSMContext) -> None:
    """Process the user's last name and complete registration."""
    text = message.text.strip()

    lastname = text
    await state.update_data({'last_name': lastname})

    data = await state.get_data()
    name = data['name']
    last_name = data['last_name']
    user_id = message.from_user.id

    saved_success = db.save_new_users(name, last_name, user_id)
    await state.clear()

    if saved_success:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        await show_start_buttons(message)
    else:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.')


async def show_start_buttons(message: Message) -> None:
    """Show start buttons to the user."""
    await message.answer('–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –î–∞–≤–∞–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ! üöÄ', reply_markup=start_keyboard)


@start_router.message(F.text == '')
async def handle_empty_message(message: Message) -> None:
    """Handle empty messages."""
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', reply_markup=start_keyboard)


@start_router.message
async def handle_other_messages(message: Message) -> None:
    """Handle other messages."""
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.', reply_markup=start_keyboard)


@start_router.message(Command('help'), IsNotAdmin())
@start_router.message(F.text == '‚ùì –ü–æ–º–æ—â—å')
async def help_handler(message: Message) -> None:
    """Handle the '‚ùì –ü–æ–º–æ—â—å' command."""
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞:\n\n"
        "üìö <b>–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É</b> - –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º.\n"
        "üìà <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å.\n"
        "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥</b> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–º –±–∞–ª–ª–∞–º.\n"
        "‚ùì <b>–ü–æ–º–æ—â—å</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è!"
    )
    await message.answer(help_text, parse_mode="HTML")
