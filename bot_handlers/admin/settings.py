from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, BaseFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot_handlers.admin.start import IsAdmin
from bot_handlers.admin.start import admin_router
from database import db
from keyboards.reply import SUBJECTS


class NewSubjectState(StatesGroup):
    """State for adding a new quiz subject."""
    new_subject = State()

class DeleteSubjectState(StatesGroup):
    """State for deleting a quiz subject."""
    subject = State()


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def admin_settings(message: Message) -> None:
    """Provide settings options for admin users."""
    text = """
–í–∏–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:
1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ 
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    markup = ReplyKeyboardMarkup(
        keyboard=[  
            [KeyboardButton(text='1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')],
            [KeyboardButton(text='2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')],
            [KeyboardButton(text='3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=markup)


@admin_router.message(IsAdmin())
@admin_router.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_admin_menu(message: Message) -> None:
    """Return to the main admin menu."""
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')],
            [KeyboardButton(text='üèÜ –†–µ–π—Ç–∏–Ω–≥')],
            [KeyboardButton(text='‚ùì –ü–æ–º–æ—â—å')],
            [KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')]
        ],
        resize_keyboard=True
    ))


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
async def handle_settings_1(message: Message) -> None:
    """Handle user management settings."""
    users = db.get_all_users()
    user_list = "\n".join([f"ID: {user[0]}, –ò–º—è: {user[1]}, –ë–∞–ª–ª—ã: {user[3]}" for user in users])
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=markup)


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def delete_user_prompt(message: Message) -> None:
    """Prompt admin to enter user ID to delete."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await admin_router.message.register(process_delete_user, IsAdmin())


async def process_delete_user(message: Message) -> None:
    """Process the deletion of a user by ID."""
    try:
        user_id = int(message.text)
        success = db.delete_user(user_id)
        if success:
            message.bot.ban_chat_member(chat_id=message.chat.id, user_id=user_id)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã')
async def handle_settings_2(message: Message) -> None:
    """Handle quiz settings."""
    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n1. –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='1. –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=markup)


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '1. –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã')
async def manage_quiz_subjects(message: Message) -> None:
    """Manage quiz subjects."""
    subjects = db.get_all_subjects()
    subject_list = "\n".join([f"- {subject[0]}" for subject in subjects])
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç')],
            [KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )
    await message.answer(f"–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:\n{subject_list}", reply_markup=markup)


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç')
async def add_quiz_subject_prompt(message: Message, state: FSMContext) -> None:
    """Prompt admin to enter a new quiz subject."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:")
    await state.set_state(NewSubjectState.new_subject)


@admin_router.message(IsAdmin())
@admin_router.message(NewSubjectState.new_subject)
async def process_add_quiz_subject(message: Message, state: FSMContext) -> None:
    """Process adding a new quiz subject."""
    new_subject = message.text.strip()
    if new_subject in SUBJECTS:
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    else:
        db.add_subject(new_subject)
        SUBJECTS.append(new_subject)
        await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç '{new_subject}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç')
async def delete_quiz_subject_prompt(message: Message, state: FSMContext) -> None:
    """Prompt admin to enter a quiz subject to delete."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(DeleteSubjectState.subject)


@admin_router.message(IsAdmin())
@admin_router.message(DeleteSubjectState.subject)
async def process_delete_quiz_subject(message: Message, state: FSMContext) -> None:
    """Process deleting a quiz subject."""
    subject_to_delete = message.text.strip()
    if subject_to_delete not in SUBJECTS:
        await message.answer("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        db.delete_subject(subject_to_delete)
        SUBJECTS.remove(subject_to_delete)
        await message.answer(f"–ü—Ä–µ–¥–º–µ—Ç '{subject_to_delete}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await state.clear()


@admin_router.message(IsAdmin())
@admin_router.message(F.text == '3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
async def handle_settings_3(message: Message) -> None:
    """Handle notification settings."""
    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n1. –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='1. –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
            [KeyboardButton(text='2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')],
            [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )
    await message.answer(text, reply_markup=markup)

